<!--<h1>{{data}}</h1>-->
<form onsubmit="submitForm(); return false;">
    <table>
        <tr><td>Servers:</td><td><select class="form-control" id="servers" multiple>
    {{#each inventory}}
            <option value="{{this.name}}">{{this.name}}</option>
    {{/each}}
        </select></td></tr>
        <tr><td>Force Cache Update <input type="checkbox" id="updatecache" /></td></tr>
    </table>
    <select id="searchprop">
        <option value="Name">Queue Name</option>
        <option value="PortName">Port Name</option>
    </select>
    <input type="text" id="searchvalue" />
    <input type="submit" class="btn btn-primary" value="Submit" />
</form>
<!--<form onsubmit="getChecked(); return false;">-->
    <!--<input type="button" onclick="deleteQueues();" value="Delete" />
    <input type="button" onclick="getPrintSettings();" value="Get Print Settings" />
    <input type="button" onclick="setPrintSettings();" value="Set Print Settings" />
    <input type="button" onclick="setQueueOptions();" value="Set Queue Options" />-->
    <hr>
    <table id="example" class="display" style="width: 100%"></table>
<!--</form>-->
<div class="modal fade" id="configModal" tabindex="-1" aria-labelledby="configModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="configModalLabel">Queue Config</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div  class="modal-body"></div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="settingsModalLabel">Queue Config</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div  class="modal-body"></div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="updateSettings()" >Submit</button>
      </div>
    </div>
  </div>
</div>
<script>
    var printerarr;
    var table;
    var settingstype;

    var createOptionsTable = function(options) {
        let table = document.createElement('table');
        table.id = 'optionstable';
        let row = table.insertRow(0);
        let cell1 = row.insertCell(0);
        let link = document.createElement('a');
        //console.log("['" + options.join("', '") + "']");
        link.href = "javascript:addOptionsRow(['" + options.join("', '") + "'])";
        link.text = "Add Row"
        cell1.appendChild(link);
        return table;
    }

    var updateSettings = function() {
        let c = confirm('Are you sure you want to modify the selected queues?');
        if(c===true) {
            let table = document.getElementById('optionstable');
            let options = {};
            for(let i = 0; i <= table.rows.length - 1; i++) {
                if(table.rows[i].className=="optionsrow") {
                    let property = getSelectedOptions(table.rows[i].getElementsByClassName('optionproperty')[0])[0];
                    let value = table.rows[i].getElementsByClassName('optionvalue')[0].value;
                    if(options.hasOwnProperty(property)) {
                        alert('The same property should not be selected twice!');
                        return;
                    } else {
                        options[property] = value;
                    }
                }
            }
            let requests = createRequests(options);
            if(settingstype=='queuesettings') {
                runJobs(requests, '/api/printer/queue/set', 0, function(err, resp) {
                    console.log('done');
                });
            } else if('printsettings') {
                runJobs(requests, '/api/printer/queue/setconfig', 0, function(err, resp) {
                    console.log('done');
                });
            } else {
                console.log('Unrecognized settings type');
                return;
            }
        } else {
            console.log('User cancelled');
        }
    }

    var deleteRow = function(e) {
        let table = document.getElementById('optionstable');
        table.deleteRow(e.target.parentNode.parentNode.rowIndex);
    }

    var addOptionsRow = function(options) {
        let table = document.getElementById('optionstable');
        let row = table.insertRow(table.rows.length);
        row.className = 'optionsrow';
        let cell1 = row.insertCell(0);
        //cell1.className = 'propertycell';
        let cell2 = row.insertCell(1);
        //cell2.className = 'valuecell';
        if(table.rows.length > 2) {
            let cell3 = row.insertCell(2);
            let button = document.createElement('button');
            button.type = 'button';
            button.className = 'btn-close';
            button.addEventListener('click', function(e) {
                deleteRow(e);
            });
            cell3.appendChild(button);
        }
        let select = document.createElement('select');
        select.className = 'optionproperty';
        for(let i = 0 ; i <= options.length - 1; i++) {
            let option = document.createElement('option');
            option.value = options[i];
            option.text = options[i];
            select.add(option);
        }
        cell1.appendChild(select);
        let input = document.createElement('input');
        input.type = 'text';
        input.className = 'optionvalue';
        cell2.appendChild(input);
    }

    var setPrintSettings = function() {
        settingstype = 'printsettings';
        let settingsmodal = $('#settingsModal');
        //console.log(configmodal);
        settingsmodal.find('.modal-title').text('Change Print Settings');
        let options = ['dmDefaultSource', 'dmColor', 'dmDuplex'];
        settingsmodal.find('.modal-body').html(createOptionsTable(options));
        addOptionsRow(options);
        settingsmodal.modal('show');
    }

    var setQueueOptions = function() {
        settingstype = 'queuesettings';
        let settingsmodal = $('#settingsModal');
        //console.log(configmodal);
        settingsmodal.find('.modal-title').text('Change Queue Options');
        let options = ['PortName', 'Location', 'DriverName'];
        settingsmodal.find('.modal-body').html(createOptionsTable(options));
        addOptionsRow(options);
        settingsmodal.modal('show');
    }

    var createRequests = function(options) {
        let requests = [];
        try {
            var rows_selected = table.column(0).checkboxes.selected();
            $.each(rows_selected, function(index, rowId){
                //console.log(table.cell($(this).attr('value'), 'Servers:name').data());
                console.log(index + ' - ' + rowId);
                let request = {
                    servers: table.cell(table.row('#' + rowId).index(), 'Servers:name').data(),
                    objects: [
                        {
                            name: table.cell(table.row('#' + rowId).index(), 'Name:name').data(),
                            rowId: rowId
                        }
                    ]
                }

                if(options) {
                    request.objects[0]['options'] = options;
                }

                requests.push(request);
            });

            return requests;
        } catch(e) {
            alert('You must first search for print queues');
        }
    }

    var getPrintSettings = function() {
        let requests = createRequests();
        //console.log('function called');
        //console.log(requests);
        if(requests.length != 1) {
            alert('1 queue should be selected with this option.');
        } else {
            let options = {
                path: '/api/printer/queue/getconfigs',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }

            let body = {
                servers: requests[0].servers,
                name: requests[0].objects[0].name
            }

            let responses = [];

            httpRequest({options: options, body: body}, function(err, resp) {
                //console.log('out');
                console.log(resp.body.data);
                for(let i = 0; i <= resp.body.data.length - 1; i++) {
                    let response = {
                        server: resp.body.data[i].request.host,
                        queue: requests[0].objects[0].name,
                        config: resp.body.data[i].response.data
                    }
                    responses.push(response);
                }
                //console.log(JSON.stringify(responses, null, 2));
                let configmodal = $('#configModal');
                //console.log(configmodal);
                configmodal.find('.modal-title').html('Print Settings');
                configmodal.find('.modal-body').html('<pre>' + JSON.stringify(responses, null, 2) + '</pre>');
                configmodal.modal('show');
                //modal.show();
            });
        }
    }

    var deleteQueues = function() {
        let requests = createRequests();
        let c = confirm('Are you sure you want to delete the following queues?\r\n' + JSON.stringify(requests, null, 2));
        if(c===true) {
            runJobs(requests, '/api/printer/queue/delete', 0,
            function(e) {
                if(e.response.body.result == 'success') {
                    //console.log(table.row('#' + e.request.body.rowId).index());
                    if(table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data().length <= 1) {
                        //console.log('requesting row delete');
                        table.row(table.row('#' + e.request.body.rowId).index()).remove().draw(false);
                    } else {
                        //console.log(table.cell(e.request.body.row, 'Servers:name').data());
                        let index = table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data().indexOf(e.request.body.server)
                        let removed = table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data().splice(index, 1);
                        //console.log(table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data())
                        //console.log(removed)
                        //table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').render();
                        table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').invalidate().draw();
                    }
                    console.log(e);
                } else {
                    console.log('deletion failed');
                    console.log(e);
                }
            }, function(err, resp) {
                console.log('done');
            });
        } else {
            console.log('request is cancelled');
        }
    }

    var runJobs = function(requests, apipath, index, ecallback, callback) {
        if(!index) {
            index = 0;
        }
        //console.log(index);
        //console.log(requests.length);
        if(index <= requests.length - 1) {
            //console.log('run');
            let jobmanager = new jobManager({maxqueue: 4});
            jobmanager.processJobs(requests[index], apipath,
            //portjob.processJobs(portjobs,
            function(e) {
                ecallback(e);
            },
            function(err, resp) {
                runJobs(requests, apipath, index + 1, ecallback, callback);
            });
        } else {
            callback(false, false);
        }
    }

    var submitForm = function() {
        let properties = getInputElements();
        let search = false;
        //console.log(getSelectedOptions(properties.searchprop)[0]);
        if(properties.searchvalue.value.trim() != '') {
            search = {
                comparison: 'AND',
                properties: {}
            }
            search.properties[getSelectedOptions(properties.searchprop)[0]] = properties.searchvalue.value.trim();
        }

        let updatecache = false;



        let request = {
            servers: getSelectedOptions(properties.servers),
            combine: true,
            search: search,
            updatecache: properties.updatecache.checked
        }

        //console.log(request);

        listPrinters(request, function(err, printers) {
            /*printerarr = printers.body;
            for(let i = 0; i <= printerarr.length - 1; i++) {
                printerarr[i].index = i;
            }*/
            if ( $.fn.DataTable.isDataTable( '#example' ) ) {
                //$('#example').DataTable().clear();
                table.destroy();
                initDatatable(printers.body);
            } else {
                $(document).ready(function() {
                    initDatatable(printers.body);
                } );
            }
        });
    }

    function initDatatable(data) {
        table = $('#example').DataTable( {
            pageLength: 25,
            dom: 'Bfrtipl',
            buttons: [
                {
                    text: 'Delete',
                    action: function() {
                        deleteQueues();
                    }
                },
                {
                    text: 'Get Print Settings',
                    action: function() {
                        getPrintSettings();
                    }
                },
                {
                    text: 'Set Print Settings',
                    action: function() {
                        setPrintSettings();
                    }
                },
                {
                    text: 'Set Queue Options',
                    action: function() {
                        setPrintOptions();
                    }
                }
            ],
            data: data,
            select: {
                'style': 'multi'
            },
            order: [[1, 'asc']],
            rowId: function(queue) {
                //console.log(queue);
                return queue.uid;
            },
            'columnDefs': [
                {
                    'targets': 0,
                    'checkboxes': {
                        'selectRow': true
                    }
                }
            ],
            columns: [
                /*{
                    data: 'select',
                    orderable: false,
                    searchable: false,
                    render: function(data, type, row, meta) {
                        return '<input type="checkbox" value="' + row['uid'] + '" name="queue" />';
                    }
                },*/
                { 
                    data: "uid",
                    title: "uid",
                    name: "uid"
                },
                { 
                    data: "Name",
                    title: "Name",
                    name: "Name"
                },
                { 
                    data: "PortName",
                    title: "Port",
                    name: "Port"
                },
                { 
                    data: "DriverName",
                    title: "Driver",
                    name: "Driver"
                },
                { 
                    data: "Location",
                    title: "Location",
                    name: "Location"
                },
                { 
                    data: "Comment",
                    title: "Comment",
                    name: "Comment"
                },
                { 
                    data: "Shared",
                    title: "Shared",
                    name: "Shared"
                },
                { 
                    data: "ShareName",
                    title: "ShareName",
                    name: "ShareName"
                },
                { 
                    data: "Servers",
                    title: "Servers",
                    name: "Servers",
                    render: function(data, type, row, meta) {
                        //console.log(row);
                        return row['Servers'].length;
                    }
                },
            ]
        } );
    }
</script>
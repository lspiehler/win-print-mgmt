<form onsubmit="submitForm(); return false;">
    <table>
        <tr><td>Servers:</td><td><select class="form-control" id="servers" multiple>
        {{#each inventory}}
            <option value="{{this}}">{{this}}</option>
        {{/each}}
        </select></td></tr>
        <tr><td>Force Cache Update <input type="checkbox" id="updatecache" /></td></tr>
        <tr><td>Combine Duplicate Queues <input type="checkbox" checked id="dedupequeues" /></td></tr>
    </table>
    <select id="searchprop">
        <option value="Name">Queue Name</option>
        <option value="PortName">Port Name</option>
        <option value="DriverName">Driver Name</option>
    </select>
    <input type="text" id="searchvalue" />
    <input type="submit" class="btn btn-primary" value="Submit" />
</form>
<!--<form onsubmit="getChecked(); return false;">-->
    <!--<input type="button" onclick="deleteQueues();" value="Delete" />
    <input type="button" onclick="getPrintSettings();" value="Get Print Settings" />
    <input type="button" onclick="setPrintSettings();" value="Set Print Settings" />
    <input type="button" onclick="setQueueOptions();" value="Set Queue Options" />-->
    <hr>
    <table id="example" class="display" style="width: 100%"></table>
<!--</form>-->
<div class="modal fade" id="configModal" tabindex="-1" aria-labelledby="configModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="configModalLabel">Queue Config</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div  class="modal-body"></div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="settingsModalLabel">Queue Config</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div  class="modal-body"></div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="updateSettings()" >Submit</button>
      </div>
    </div>
  </div>
</div>
<div class="modal fade" id="activityModal" aria-labelledby="activityModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="activityModalLabel">Activity Log</h5>
            <!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
        </div>
        <div  class="modal-body"></div>
        <div class="modal-footer">
            <span id="current">0</span> / <span id="total"></span>
            <button id="closeprogress" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
        </div>
    </div>
</div>
<div id="overlay" style="display:none;">
    <div class="spinner"></div>
    <br/>
    Processing...
</div>
<script>
    var printerarr;
    var table;
    var settingstype;
    var dedupe;

    var createOptionsTable = function(options) {
        let table = document.createElement('table');
        table.id = 'optionstable';
        let row = table.insertRow(0);
        let cell1 = row.insertCell(0);
        let link = document.createElement('a');
        //console.log("['" + options.join("', '") + "']");
        link.href = "javascript:addOptionsRow(['" + options.join("', '") + "'])";
        link.text = "Add Row"
        cell1.appendChild(link);
        return table;
    }

    var createMissingPorts = function(params, callback) {
        if(params.requests.length >= 1) {
            processMultipleRequests({requests: params.requests, apipath: '/api/printer/port/create'}, function(e) {
                appendActivityLog(e);
                updateProgress();
            }, function(err, resp) {
                callback(false, resp);
            });
        } else {
            callback(false, false);
        }
    }

    var getQueueData = function(params, callback) {
        if(!params['index']) {
            params['index'] = 0;
        }
        //console.log(params.request.objects);
        //console.log(params.index);
        if(params.index <= params.request.objects.length - 1) {
            let options = {
                path: '/api/printer/queue/getconfigs',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }

            let body = {
                servers: [params.request.objects[params.index].source],
                name: params.request.objects[params.index].name
            }

            httpRequest({options: options, body: body}, function(err, resp) {
                if(err) {
                    if(err=='401') {
                        alert('You are no longer logged in!');
                    } else {
                        console.log(err);
                    }
                    callback(err, resp);
                } else {
                    //console.log(resp.body.data[0].response);
                    params.request.objects[params.index]['config'] = [
                        {
                            type: 8,
                            options: {
                                dmDefaultSource: resp.body.data[0].response.data.dmDefaultSource,
                                dmColor: resp.body.data[0].response.data.dmColor,
                                dmDuplex: resp.body.data[0].response.data.dmDuplex
                            }
                        }
                    ]
                }
                params.index = params.index + 1;
                updateProgress();
                getQueueData(params, callback);
            });
        } else {
            callback(false, true);
        }
    }

    var updateSettings = function() {
        if(settingstype=='copyqueue') {
            let c = confirm('Are you sure you want to copy the selected queues to the selected servers?');
            if(c===true) {
                 $('#settingsModal').modal('hide');
                let properties = getInputElements();
                let ports = [];
                let servers = getSelectedOptions(properties.destination);
                var rows_selected = table.column(0).checkboxes.selected();
                let request = {
                    servers: servers,
                    objects: []
                }
                $.each(rows_selected, function(index, rowId){
                    let queue = table.row('#' + rowId).data();
                    //console.log(queue);
                    //console.log(Object.keys(queue));
                    let object = {
                        source: queue.Servers[0]
                    }
                    let copyproperties = [
                        'Name',
                        'PortName',
                        'Comment',
                        'Location',
                        'Shared',
                        'ShareName',
                        'DriverName',
                        'Published'
                    ]
                    for(let i = 0; i <= copyproperties.length - 1; i++) {
                        //console.log(typeof(queue[copyproperties[i]]))
                        if(typeof(queue[copyproperties[i]])=='object') {
                            if(queue[copyproperties[i]].length > 0) {
                                object[copyproperties[i].toLowerCase()] = queue[copyproperties[i]][0];
                            }
                        } else {
                            object[copyproperties[i].toLowerCase()] = queue[copyproperties[i]]
                        }
                    }
                    /*let object = {
                        name: queue.Name,
                        port: queue.PortName[0],
                        comment: queue.Comment[0],
                        location: queue.Location[0],
                        shared: queue.Shared[0],
                        sharename: queue.ShareName[0],
                        driver: queue.DriverName[0],
                        source: queue.Servers[0]
                    }*/
                    ports.push(queue.PortName[0]);
                    request.objects.push(object)
                });
                //console.log(request);
                //return;
                initLog('Generating list of ports missing on destination servers...', 1, true);
                getMissingPorts({servers: servers, ports: ports}, function(err, portrequests) {
                    updateProgress();
                    //console.log(portrequests.length);
                    if(portrequests.length >= 1) {
                        let total = 0;
                        for(let i = 0; i <= portrequests.length - 1; i++) {
                            total = total + (portrequests[i].servers.length * portrequests[i].objects.length)
                        }
                        initLog('Creating missing ports on destination servers...', total, false);
                    }
                    createMissingPorts({requests: portrequests}, function(err, resp) {
                        if(resp) {
                            appendActivityLog('Port creation completed');
                        } else {
                            appendActivityLog('All required ports already exist');
                        }
                        initLog('Requesting configuration from all queues...', request.objects.length, false);
                        getQueueData({request: request}, function(err, queuedata) {
                            //console.log(request);
                            let jobmanager = new jobManager({maxqueue: 4});
                            //let printerjobs = printerjob.createJobQueue(request);
                            //console.log(printerjobs);
                            initLog('Creating selected queues on destination servers...', request.servers.length * request.objects.length, false);
                            jobmanager.processJobs(request, '/api/printer/queue/create',
                            function(e) {
                                appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.name + ' - ' + e.response.body.message);
                                updateProgress();
                            },
                            function(err, resp) {
                                if(err) {
                                    console.log(err);
                                } else {
                                    let closeprogress = document.getElementById('closeprogress');
                                    closeprogress.style.display = 'inline';
                                    //console.log('printers done');
                                    //console.log(resp);
                                }
                            });
                        });
                    });
                });
                //console.log(request);
            }
        } else {
            let c = confirm('Are you sure you want to modify the selected queues?');
            if(c===true) {
                $('#settingsModal').modal('hide');
                //console.log(requests);
                let table = document.getElementById('optionstable');
                let options = {};
                for(let i = 0; i <= table.rows.length - 1; i++) {
                    if(table.rows[i].className=="optionsrow") {
                        let property = getSelectedOptions(table.rows[i].getElementsByClassName('optionproperty')[0])[0];
                        let value = table.rows[i].getElementsByClassName('optionvalue')[0].value;
                        if(options.hasOwnProperty(property)) {
                            alert('The same property should not be selected twice!');
                            return;
                        } else {
                            options[property] = value;
                        }
                    }
                }
                let apipath;
                if(settingstype=='queuesettings') {
                    apipath = '/api/printer/queue/set';
                } else if('printsettings') {
                    apipath = '/api/printer/queue/setconfig';
                } else {
                    alert('Unrecognized settings type');
                    return;
                }
                let requests = createRequests(options);
                if(requests[0].objects[0].options.hasOwnProperty('PortName')) {
                    let servers = [];
                    let ports = [];
                    for(let i = 0; i <= requests.length - 1; i++) {
                        //console.log(requests[i]);
                        for(let j = 0; j <= requests[i].servers.length - 1; j++) {
                            if(servers.indexOf(requests[i].servers[j]) < 0) {
                                servers.push(requests[i].servers[j]);
                            }
                        }
                        for(let j = 0; j <= requests[i].objects.length - 1; j++) {
                            if(ports.indexOf(requests[i].objects[j].options.PortName) < 0) {
                                ports.push(requests[i].objects[j].options.PortName);
                            }
                        }
                    }
                    //console.log(servers);
                    //console.log(ports);
                    //return;
                    initLog('Generating list of ports missing on destination servers...', 1, true);
                    getMissingPorts({servers: servers, ports: ports}, function(err, portrequests) {
                        updateProgress();
                        //console.log(portrequests.length);
                        if(portrequests.length >= 1) {
                            let total = 0;
                            for(let i = 0; i <= portrequests.length - 1; i++) {
                                total = total + (portrequests[i].servers.length * portrequests[i].objects.length)
                            }
                            initLog('Creating missing ports on destination servers...', total, false);
                        }
                        createMissingPorts({requests: portrequests}, function(err, resp) {
                            if(resp) {
                                appendActivityLog('Port creation completed');
                            } else {
                                appendActivityLog('All required ports already exist');
                            }
                            let sum = 0;
                            for(let i = 0; i <= requests.length - 1; i++) {
                                sum = sum + requests[i].servers.length * requests[i].objects.length;
                            }
                            initLog('Updating selected queues on destination servers...', sum, false);
                            runJobs(requests, apipath, 0,
                            function(e) {
                                appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.name + ' -> ' + JSON.stringify(e.request.body.options) + ' ' + e.response.body.message || '');
                                updateProgress();
                            }, function(err, resp) {
                                let closeprogress = document.getElementById('closeprogress');
                                closeprogress.style.display = 'inline';
                            });
                        });
                    });
                } else {
                    let sum = 0;
                    for(let i = 0; i <= requests.length - 1; i++) {
                        sum = sum + requests[i].servers.length * requests[i].objects.length;
                    }
                    initLog('Updating selected queues on destination servers...', sum, true);
                    runJobs(requests, apipath, 0,
                    function(e) {
                        appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.name + ' -> ' + JSON.stringify(e.request.body.options) + ' ' + e.response.body.message || '');
                        updateProgress();
                    }, function(err, resp) {
                        let closeprogress = document.getElementById('closeprogress');
                        closeprogress.style.display = 'inline';
                    });
                }
            } else {
                //console.log('User cancelled');
            }
        }
    }

    /*var createPorts = function(requests, ecallback, callback) {
        if(requests[0].objects[0].options.hasOwnProperty('PortName')) {
            console.log('must add ports first');
            //get a deduped list of servers
            let servers = [];
            for(let i = 0; i <= requests.length - 1; i++) {
                for(let j = 0; j <= requests[i].servers.length - 1; j++) {
                    if(servers.indexOf(requests[i].servers[j]) < 0) {
                        servers.push(requests[i].servers[j]);
                    } else {
                        console.log('server already exists');
                    }
                }
            }
            //console.log(servers);
            let request = {
                servers: servers,
                objects: [
                    {
                        ip: requests[0].objects[0].options.PortName[0]
                    }
                ]
            }

            //console.log(request);

            initLog('Processing port creation...', request.servers.length * request.objects.length, true);
            //console.log(request.servers.length * request.objects.length);
            //let portjob = new portJob();
            //let portjobs = portjob.createJobQueue(request);
            let jobmanager = new jobManager({maxqueue: 4});
            jobmanager.processJobs(request, '/api/printer/port/create',
            //portjob.processJobs(portjobs,
            function(e) {
                ecallback(e);
                //console.log(e);
            },
            function(err, resp) {
                if(err) {
                    console.log(err);
                } else {
                    callback(false, true);
                }
            });
        } else {
            callback(false, false);
        }
    }*/

    var deleteRow = function(e) {
        let table = document.getElementById('optionstable');
        table.deleteRow(e.target.parentNode.parentNode.rowIndex);
    }

    var addOptionsRow = function(options) {
        let table = document.getElementById('optionstable');
        let row = table.insertRow(table.rows.length);
        row.className = 'optionsrow';
        let cell1 = row.insertCell(0);
        //cell1.className = 'propertycell';
        let cell2 = row.insertCell(1);
        //cell2.className = 'valuecell';
        if(table.rows.length > 2) {
            let cell3 = row.insertCell(2);
            let button = document.createElement('button');
            button.type = 'button';
            button.className = 'btn-close';
            button.addEventListener('click', function(e) {
                deleteRow(e);
            });
            cell3.appendChild(button);
        }
        let select = document.createElement('select');
        select.className = 'optionproperty';
        for(let i = 0 ; i <= options.length - 1; i++) {
            let option = document.createElement('option');
            option.value = options[i];
            option.text = options[i];
            select.add(option);
        }
        cell1.appendChild(select);
        let input = document.createElement('input');
        input.type = 'text';
        input.className = 'optionvalue';
        cell2.appendChild(input);
    }

    var initLog = function(message, totaljobs, clear) {
        let activitymodal = $('#activityModal').modal({
            backdrop: 'static',
            keyboard: false
        });
        if(clear) {
            //console.log('modal should show');
            activitymodal.find('.modal-body').html('');
            activitymodal.modal('show');
        }
        appendActivityLog(message);
        let closeprogress = document.getElementById('closeprogress');
        closeprogress.style.display = 'none';
        let total = document.getElementById('total');
        let current = document.getElementById('current');
        current.innerText = 0;
        total.innerText = totaljobs;
    }

    var setPrintSettings = function() {
        let requests = createRequests();
        if(requests.length <= 0) {
            alert('You must select one or more queues.');
            return;
        }
        settingstype = 'printsettings';
        let settingsmodal = $('#settingsModal');
        //console.log(configmodal);
        settingsmodal.find('.modal-title').text('Change Print Settings');
        let options = ['dmDefaultSource', 'dmColor', 'dmDuplex'];
        settingsmodal.find('.modal-body').html(createOptionsTable(options));
        addOptionsRow(options);
        settingsmodal.modal('show');
    }

    var setQueueOptions = function() {
        let requests = createRequests();
        if(requests.length <= 0) {
            alert('You must select one or more queues.');
            return;
        }
        settingstype = 'queuesettings';
        let settingsmodal = $('#settingsModal');
        //console.log(configmodal);
        settingsmodal.find('.modal-title').text('Change Queue Options');
        let options = ['PortName', 'Location', 'DriverName', 'Comment'];
        settingsmodal.find('.modal-body').html(createOptionsTable(options));
        addOptionsRow(options);
        settingsmodal.modal('show');
    }

    var copyQueue = function() {
        let requests = createRequests();
        if(requests.length <= 0) {
            alert('You must select one or more queues.');
            return;
        }
        settingstype = 'copyqueue';
        let settingsmodal = $('#settingsModal');
        //console.log(configmodal);
        settingsmodal.find('.modal-title').text('Copy Queue');
        let destination = document.getElementById('servers').cloneNode(true);
        destination.id = 'destination';
        settingsmodal.find('.modal-body').html('');
        settingsmodal.find('.modal-body').append(destination);
        settingsmodal.modal('show');
    }

    var clearQueue = function() {
        let requests = createRequests();
        if(requests.length <= 0) {
            alert('You must select one or more queues.');
            return;
        }
        let c = confirm('Are you sure you want to clear all print jobs from the selected queues?');
        if(c===true) {
            let requests = createRequests();
            let sum = 0;
            for(let i = 0; i <= requests.length - 1; i++) {
                sum = sum + requests[i].servers.length * requests[i].objects.length;
            }
            initLog('Submitting requests to clear print jobs...', sum, true);
            //console.log(requests);
            runJobs(requests, '/api/printer/queue/flush', 0,
            function(e) {
                appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.name + ' - ' + e.response.body.message);
                updateProgress();
            }, function(err, resp) {
                //console.log('done');
                let closeprogress = document.getElementById('closeprogress');
                closeprogress.style.display = 'inline';
            });
        }
    }

    var printTestPage = function() {
        let requests = createRequests();
        if(requests.length <= 0) {
            alert('You must select one or more queues.');
            return;
        }
        let c = confirm('Are you sure you want to send test pages to the selected queues?');
        if(c===true) {
            let requests = createRequests();
            let sum = 0;
            for(let i = 0; i <= requests.length - 1; i++) {
                sum = sum + requests[i].servers.length * requests[i].objects.length;
            }
            initLog('Submitting test pages...', sum, true);
            //console.log(requests);
            runJobs(requests, '/api/printer/queue/testpage', 0,
            function(e) {
                appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.name + ' - ' + e.response.body.message);
                updateProgress();
            }, function(err, resp) {
                //console.log('done');
                let closeprogress = document.getElementById('closeprogress');
                closeprogress.style.display = 'inline';
            });
        }
    }

    var createRequests = function(options) {
        let requests = [];
        try {
            var rows_selected = table.column(0).checkboxes.selected();
            //console.log(rows_selected);
            $.each(rows_selected, function(index, rowId){
                let queue = table.row('#' + rowId).data();
                //console.log(table.cell($(this).attr('value'), 'Servers:name').data());
                //console.log(queue);
                let request = {
                    servers: queue.Servers,
                    objects: [
                        {
                            name: queue.Name,
                            rowId: rowId
                        }
                    ]
                }

                if(options) {
                    request.objects[0]['options'] = options;
                }

                requests.push(request);
            });

            return requests;
        } catch(e) {
            alert('You must first search for print queues');
        }
    }

    var getPrintSettings = function() {
        let requests = createRequests();
        //console.log('function called');
        //console.log(requests);
        if(requests.length != 1) {
            alert('1 queue should be selected with this option.');
        } else {
            let options = {
                path: '/api/printer/queue/getconfigs',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }

            let body = {
                servers: requests[0].servers,
                name: requests[0].objects[0].name
            }

            let responses = [];

            httpRequest({options: options, body: body}, function(err, resp) {
                if(err) {
                    if(err=='401') {
                        alert('You are no longer logged in!');
                    } else {
                        console.log(err);
                    }
                        callback(err, resp);
                } else {
                    //console.log('out');
                    //console.log(resp.body.data);
                    for(let i = 0; i <= resp.body.data.length - 1; i++) {
                        let response = {
                            server: resp.body.data[i].request.host,
                            queue: requests[0].objects[0].name,
                            config: resp.body.data[i].response.data
                        }
                        responses.push(response);
                    }
                    //console.log(JSON.stringify(responses, null, 2));
                    let configmodal = $('#configModal');
                    //console.log(configmodal);
                    configmodal.find('.modal-title').html('Print Settings');
                    configmodal.find('.modal-body').html('<pre>' + JSON.stringify(responses, null, 2) + '</pre>');
                    configmodal.modal('show');
                    //modal.show();
                }
            });
        }
    }

    var deleteQueues = function() {
        let requests = createRequests();
        if(requests.length <= 0) {
            alert('You must select one or more queues.');
            return;
        }
        let c = confirm('Are you sure you want to delete the following queues?\r\n' + JSON.stringify(requests, null, 2));
        if(c===true) {
            let sum = 0;
            for(let i = 0; i <= requests.length - 1; i++) {
                sum = sum + requests[i].servers.length * requests[i].objects.length;
            }
            initLog('Processing queue deletion...', sum, true);
            //console.log(requests);
            runJobs(requests, '/api/printer/queue/delete', 0,
            function(e) {
                if(e.response.body.result == 'success') {
                    //console.log(table.row('#' + e.request.body.rowId).index());
                    if(table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data().length <= 1) {
                        //console.log('requesting row delete');
                        table.row(table.row('#' + e.request.body.rowId).index()).remove().draw(false);
                    } else {
                        //console.log(table.cell(e.request.body.row, 'Servers:name').data());
                        let index = table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data().indexOf(e.request.body.server)
                        let removed = table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data().splice(index, 1);
                        //console.log(table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').data())
                        //console.log(removed)
                        //table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').render();
                        table.cell(table.row('#' + e.request.body.rowId).index(), 'Servers:name').invalidate().draw(false);
                    }
                    //console.log(e);

                } else {
                    //console.log('deletion failed');
                    //console.log(e);
                }
                appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.name + ' - ' + e.response.body.message);
                updateProgress();
            }, function(err, resp) {
                //console.log('done');
                let closeprogress = document.getElementById('closeprogress');
                closeprogress.style.display = 'inline';
            });
        } else {
            //console.log('request is cancelled');
        }
    }

    function appendActivityLog(line) {
        let activitymodal = $('#activityModal');
        let p = document.createElement('p');
        p.className = 'log';
        p.innerText = line;
        //console.log(activitymodal.scrollHeight);
        //console.log(activitymodal.offsetHeight);
        var iScrollHeight = activitymodal.prop("scrollHeight") - (activitymodal.height() - 20);
        //console.log(iScrollHeight);
        //console.log(activitymodal.scrollTop());
        activitymodal.animate({ scrollTop: iScrollHeight }, "slow");
        activitymodal.find('.modal-body').append(p);
    }

    var runJobs = function(requests, apipath, index, ecallback, callback) {
        if(!index) {
            index = 0;
        }
        //console.log(index);
        //console.log(requests.length);
        if(index <= requests.length - 1) {
            //console.log('run');
            let jobmanager = new jobManager({maxqueue: 4});
            jobmanager.processJobs(requests[index], apipath,
            //portjob.processJobs(portjobs,
            function(e) {
                ecallback(e);
            },
            function(err, resp) {
                runJobs(requests, apipath, index + 1, ecallback, callback);
            });
        } else {
            callback(false, false);
        }
    }

    function updateProgress() {
        let current = document.getElementById('current');
        current.innerText = parseInt(current.innerText) + 1;
    }

    var submitForm = function() {
        let properties = getInputElements();
        let servers = getSelectedOptions(properties.servers);

        if(servers.length <= 0) {
            alert('You must select at least one server! 🙄');
            return ;
        }
        $('#overlay').fadeIn();
        let search = false;
        //console.log(getSelectedOptions(properties.searchprop)[0]);
        if(properties.searchvalue.value.trim() != '') {
            search = {
                comparison: 'AND',
                properties: {}
            }
            search.properties[getSelectedOptions(properties.searchprop)[0]] = properties.searchvalue.value.trim();
        }

        let updatecache = false;

        dedupe = properties.dedupequeues.checked;

        //console.log(properties.dedupequeues.checked);

        let request = {
            servers: servers,
            combine: properties.dedupequeues.checked,
            search: search,
            updatecache: properties.updatecache.checked
        }

        //console.log(request);

        listPrinters(request, function(err, printers) {
            if(err) {
                if(err=='401') {
                    let ok = confirm('You are no longer logged in. Click OK to be redirected to the login screen.')
                    if(ok) {
                        window.location = '/login'
                    }
                } else {
                    console.log(err);
                }
                $('#overlay').fadeOut();
            } else {
                if ( $.fn.DataTable.isDataTable( '#example' ) ) {
                    //$('#example').DataTable().clear();
                    table.destroy();
                    initDatatable(printers.body);
                } else {
                    $(document).ready(function() {
                        initDatatable(printers.body);
                    } );
                }
                $('#overlay').fadeOut();
            }
        });
    }

    function initDatatable(data) {
        table = $('#example').DataTable( {
            pageLength: 25,
            dom: 'Bfrtipl',
            buttons: [
                {{#if user.isAdmin}}{
                    text: 'Delete',
                    action: function() {
                        deleteQueues();
                    }
                },{{/if}}
                {
                    text: 'Get Print Settings',
                    action: function() {
                        getPrintSettings();
                    }
                },
                {{#if user.isAdmin}}{
                    text: 'Set Print Settings',
                    action: function() {
                        setPrintSettings();
                    }
                },
                {
                    text: 'Set Queue Options',
                    action: function() {
                        setQueueOptions();
                    }
                },{{/if}}
                {
                    text: 'Clear Queue',
                    action: function() {
                        clearQueue();
                    }
                },
                {
                    text: 'Print Test Page',
                    action: function() {
                        printTestPage();
                    }
                },
                {{#if user.isAdmin}}{
                    text: 'Copy Queue',
                    action: function() {
                        copyQueue();
                    }
                }{{/if}}
            ],
            data: data,
            select: {
                'style': {{#if user.isAdmin}}'os'{{else}}'single'{{/if}}
            },
            order: [[1, 'asc']],
            rowId: function(queue) {
                //console.log(queue);
                return queue.uid;
            },
            'columnDefs': [
                {
                    'targets': 0,
                    'checkboxes': {
                        'selectRow': true,
                        selectAll: {{#if user.isAdmin}}true{{else}}false{{/if}}
                    }
                }
            ],
            columns: [
                /*{
                    data: 'select',
                    orderable: false,
                    searchable: false,
                    render: function(data, type, row, meta) {
                        return '<input type="checkbox" value="' + row['uid'] + '" name="queue" />';
                    }
                },*/
                { 
                    data: "uid",
                    title: "",
                    name: "uid"
                },
                { 
                    data: "Name",
                    title: "Name",
                    name: "Name"
                },
                { 
                    data: "PortName",
                    title: "Port",
                    name: "Port"
                },
                { 
                    data: "DriverName",
                    title: "Driver",
                    name: "Driver"
                },
                { 
                    data: "Location",
                    title: "Location",
                    name: "Location"
                },
                { 
                    data: "Comment",
                    title: "Comment",
                    name: "Comment"
                },
                { 
                    data: "Shared",
                    title: "Shared",
                    name: "Shared"
                },
                { 
                    data: "ShareName",
                    title: "ShareName",
                    name: "ShareName"
                },
                { 
                    data: "PrinterStatus",
                    title: "Status",
                    name: "Status",
                    /*render: function(data, type, row, meta) {
                        switch (row['PrinterStatus']) {
                            case 0:
                                return 'Ready';
                                break;
                            case 1:
                                return 'Paused';
                                break;
                            case 2:
                                return 'Error';
                                break;
                            case 3:
                                return 'Paused - Error';
                                break;
                            case 4:
                                return 'Deleting';
                                break;
                            case 128:
                                return 'Deleting';
                                break;
                            case 130:
                                return 'Error - Offline';
                                break;
                            case 131072:
                                return 'Toner/Ink Low';
                                break;
                            default:
                                return row['PrinterStatus'];
                        }
                        return row['PrinterStatus'].join(', ');
                    }*/
                },
                { 
                    data: "JobCount",
                    title: "JobCount",
                    name: "JobCount"
                },
                { 
                    data: "Servers",
                    title: "Servers",
                    name: "Servers",
                    render: function(data, type, row, meta) {
                        //console.log(row);
                        if(dedupe) {
                            return '<span index="" title="' + row['Servers'].join('\r\n') + '">' + row['Servers'].length + '</span>';
                        } else {
                            return '<span>' + row['Servers'][0] + '</span>';
                        }
                    }
                },
            ]
        } );
    }
</script>
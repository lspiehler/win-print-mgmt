<form onsubmit="submitForm(); return false;">
    <table>
        <tr><td>Servers:</td><td><select onchange="clearDrivers();" class="form-control" id="servers" multiple>
            <!--<option value="DESKTOP-UF8E9D5">DESKTOP-UF8E9D5</option>
            <option value="DESKTOP-UF8E9D6">DESKTOP-UF8E9D6</option>
            <option value="DESKTOP-UF8E9D7">DESKTOP-UF8E9D7</option>
            <option value="DESKTOP-UF8E9D8">DESKTOP-UF8E9D8</option>-->
            {{#each inventory}}
                <option value="{{this}}">{{this}}</option>
            {{/each}}
        </select></td></tr>

        <tr><td>Driver:</td><td>
            <div class="form-row">
                <div class="form-group">
                    <select onchange="getDriverTemplate(this)" name="driver" id="driver">
                        <option value="false">Query for drivers after selecting servers</option>
                    </select>
                </div>
                <div class="form-group">
                    <button class="btn btn-info" type="button" onclick="getDrivers();">Get Drivers</button><span style="margin-left: 10px;" id="drivertemp"></span>
                </div>
            </div>    
            </td></tr>

    <tr><td>Queue Name:</td><td><input class="form-control" type="text" id="queue" value="TestPrinter" /></td></tr>
    <tr><td>Port FQDN/IP:</td><td><input class="form-control" type="text" id="port" value="10.254.202.22" /></td></tr>
    <tr><td>Location:</td><td><input class="form-control" type="text" id="location" /></td></tr>
    <tr><td>Comment:</td><td><input class="form-control" type="text" id="comment" /></td></tr>
    <tr><td>Shared:</td><td><input type="checkbox" id="shared" /></td></tr>
        <tr>
            <td>Trays</td>
            <td>
                <select class="form-control" id="trays" multiple>
                    <option value="0">0</options>
                    <option value="1">1</options>
                    <option value="2">2</options>
                    <option value="3">3</options>
                    <option value="4">4</options>
                </select>
                <button type="button" class="btn btn-warning" onclick="clearTrays();">Clear Tray Selection</button>
            </td>
        </tr>
        <tr><td colspan=2><input type="submit" class="btn btn-primary" value="Submit" /></td></tr>
    </table>
    <div class="modal fade" id="activityModal" aria-labelledby="activityModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="activityModalLabel">Activity Log</h5>
                <!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
            </div>
            <div  class="modal-body"></div>
            <div class="modal-footer">
                <span id="current">0</span> / <span id="total"></span>
                <button id="closeprogress" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
            </div>
        </div>
    </div>

<script>
    var drivertemplate = false;

    function clearTrays() {
        let trays = document.getElementById('trays');
        for(let i = 0; i <= trays.options.length - 1; i++) {
            trays.options[i].selected = false;
        }
    }

    function getDriverTemplate(elem) {
        //console.log(elem);
        let options = {
            path: '/api/printer/driver/gettemplate/' + getSelectedOptions(elem),
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        }

        let responses = [];

        httpRequest({options: options}, function(err, resp) {
            if(resp.body.result!='success') {
                driverTemplateStatus(false);
                drivertemplate = false;
            } else {
                drivertemplate = resp.body.data;
                driverTemplateStatus(true);
                //console.log(driver);
            }
        });
    }

    function clearDrivers() {
        let driver = document.getElementById('driver');
        driver.options.length = 0;
        var option = document.createElement("option");
        option.text = 'Query for drivers after selecting servers';
        option.value = 'false';
        driver.add(option);
        let drivertemp = document.getElementById('drivertemp');
        drivertemp.innerHTML = '';
    }

    function driverTemplateStatus(status) {
        let drivertemp = document.getElementById('drivertemp');
        drivertemp.innerHTML = '';
        //console.log('here')
        //console.log(status)
        if(status) {
            let facheck = document.createElement('i');
            facheck.className = 'fa fa-check';
            facheck.style.color = 'green';
            drivertemp.appendChild(facheck);
            let span = document.createElement('span');
            span.innerText = ' Template Found!';
            drivertemp.appendChild(span);
            drivertemp.title = JSON.stringify(drivertemplate, null, 2);
        } else {
            let facheck = document.createElement('i');
            facheck.className = 'fa fa-times';
            facheck.style.color = 'red';
            drivertemp.appendChild(facheck);
            let span = document.createElement('span');
            span.innerText = ' No Template Found!';
            drivertemp.appendChild(span);
        }
    }

    function getDrivers() {
        let properties = getInputElements();

        let servers = getSelectedOptions(properties.servers);

        if(servers.length <= 0) {
            alert('You must select at least one server! ðŸ™„');
            return false;
        }
        
        getCommonDrivers({ servers: servers }, function(err, drivers) {
            if(err) {
                //console.log(err);
            } else {
                let driver = document.getElementById('driver');
                driver.options.length = 0;
                for(let i = 0; i <= drivers.body.length - 1; i++) {
                    var option = document.createElement("option");
                    option.text = drivers.body[i];
                    option.value = drivers.body[i];
                    driver.add(option);
                }
                getDriverTemplate(driver);
            }
        });
    }

    function updateProgress() {
        let current = document.getElementById('current');
        current.innerText = parseInt(current.innerText) + 1;
    }

    function appendActivityLog(line) {
        let activitymodal = $('#activityModal');
        let p = document.createElement('p');
        p.className = 'log';
        p.innerText = line;
        activitymodal.find('.modal-body').append(p);
    }

    var initLog = function(message, totaljobs) {
        let activitymodal = $('#activityModal').modal({
            backdrop: 'static',
            keyboard: false
        });
        activitymodal.find('.modal-body').html('');
        appendActivityLog(message);
        activitymodal.modal('show');
        let closeprogress = document.getElementById('closeprogress');
        closeprogress.style.display = 'none';
        let total = document.getElementById('total');
        let current = document.getElementById('current');
        current.innerText = 0;
        total.innerText = totaljobs;
    }

    function submitForm() {
        let properties = getInputElements();

        //check for required values
        let reqstr = ['queue', 'port'];
        for(let i = 0; i <= reqstr.length - 1; i++) {
            if(properties[reqstr[i]].value.trim() == '') {
                alert('You must enter a value for ' + reqstr[i]);
                return false;
            }
        }

        let servers = getSelectedOptions(properties.servers);

        if(servers.length <= 0) {
            alert('You must select at least one server! ðŸ™„');
            return false;
        }

        let driver = getSelectedOptions(properties.driver)[0];

        if(driver == 'false') {
            alert('A valid driver must be selected!');
            return;
        }

        let request = {
            servers: servers,
            objects: [
                {
                    ip: properties.port.value
                }
            ]
        }

        initLog('Processing port creation...', request.servers.length * request.objects.length);
        //console.log(request.servers.length * request.objects.length);
        /*let portjob = new portJob();
        let portjobs = portjob.createJobQueue(request);*/
        let jobmanager = new jobManager({maxqueue: 4});
        jobmanager.processJobs(request, '/api/printer/port/create',
        //portjob.processJobs(portjobs,
        function(e) {
            appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.ip + ' - ' + e.response.body.message);
            updateProgress()
            //console.log(e);
        },
        function(err, resp) {
            if(err) {
                console.log(err);
            } else {
                //console.log('ports done');
                let trays = getSelectedOptions(properties.trays);
                if(trays.length <= 0) {
                    trays = [0];
                }

                request = {
                    servers: getSelectedOptions(properties.servers),
                    objects: []
                }

                for(let i = 0; i <= trays.length - 1; i++) {
                    //console.log('here');
                    let name;
                    if(trays[i]=='0') {
                        name = properties.queue.value;
                    } else {
                        name = properties.queue.value + '-T' + trays[i]
                    }
                    let object = {
                        name: name,
                        portname: properties.port.value,
                        comment: properties.comment.value,
                        location: properties.location.value,
                        shared: properties.shared.checked,
                        drivername: driver
                    }

                    //console.log(object);

                    if(drivertemplate && drivertemplate[parseInt(trays[i])]) {
                        //console.log(object);
                        object['config'] = [
                            {
                                type: 8,
                                options: drivertemplate[parseInt(trays[i])].options
                            }
                        ]
                        //console.log(object);
                    }

                    request.objects.push(object)
                }

                let current = document.getElementById('current');
                current.innerText = 0;

                let total = document.getElementById('total');
                total.innerText = request.servers.length * request.objects.length;

                appendActivityLog('Processing queue creation...');

                /*console.log(driver);
                console.log(request);
                return;*/
                let jobmanager = new jobManager({maxqueue: 4});
                //let printerjobs = printerjob.createJobQueue(request);
                //console.log(printerjobs);
                jobmanager.processJobs(request, '/api/printer/queue/create',
                function(e) {
                    appendActivityLog(e.response.body.result + ' - ' + e.request.body.server + ' - ' + e.request.body.name + ' - ' + e.response.body.message);
                    updateProgress();
                },
                function(err, resp) {
                    if(err) {
                        console.log(err);
                    } else {
                        let closeprogress = document.getElementById('closeprogress');
                        closeprogress.style.display = 'inline';
                        //console.log('printers done');
                        //console.log(resp);
                    }
                });
            }
        });
    }
</script>